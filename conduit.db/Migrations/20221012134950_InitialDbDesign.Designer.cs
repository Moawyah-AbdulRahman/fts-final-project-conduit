// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using conduit.db;

#nullable disable

namespace conduit.db.Migrations
{
    [DbContext(typeof(ConduitDbContext))]
    [Migration("20221012134950_InitialDbDesign")]
    partial class InitialDbDesign
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.Property<long>("FavoriteArticlesId")
                        .HasColumnType("bigint");

                    b.Property<long>("FavouritingUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("FavoriteArticlesId", "FavouritingUsersId");

                    b.HasIndex("FavouritingUsersId");

                    b.ToTable("ArticleUser");
                });

            modelBuilder.Entity("conduit.db.models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Title", "CreatorId")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("conduit.db.models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WriterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("WriterId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("conduit.db.models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasCheckConstraint("ck_password_length_gte_8", "LEN(Password) >= 8");

                    b.HasCheckConstraint("ck_username_length_gte_3", "LEN(Username) >= 3");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<long>("FollowedUsersId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowersId")
                        .HasColumnType("bigint");

                    b.HasKey("FollowedUsersId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.HasOne("conduit.db.models.Article", null)
                        .WithMany()
                        .HasForeignKey("FavoriteArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("conduit.db.models.User", null)
                        .WithMany()
                        .HasForeignKey("FavouritingUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("conduit.db.models.Article", b =>
                {
                    b.HasOne("conduit.db.models.User", "Creator")
                        .WithMany("PostedArticles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("conduit.db.models.Comment", b =>
                {
                    b.HasOne("conduit.db.models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("conduit.db.models.User", "Writer")
                        .WithMany("WrittenComments")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("conduit.db.models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("conduit.db.models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("conduit.db.models.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("conduit.db.models.User", b =>
                {
                    b.Navigation("PostedArticles");

                    b.Navigation("WrittenComments");
                });
#pragma warning restore 612, 618
        }
    }
}
